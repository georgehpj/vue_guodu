{"version":3,"sources":["dev-server.js"],"names":[],"mappings":";;;;;;;;AAAA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,UAAU,QAAQ,SAAR,CAAd;AACA,IAAI,SAAS,QAAQ,WAAR,CAAb;AACA,IAAI,kBAAkB,QAAQ,uBAAR,CAAtB;AACA,IAAI,gBAAgB,QAAQ,qBAAR,CAApB;;AAEA;AACA,IAAI,OAAO,QAAQ,GAAR,CAAY,IAAZ,IAAoB,OAAO,GAAP,CAAW,IAA1C;AACA;AACA;AACA,IAAI,aAAa,OAAO,GAAP,CAAW,UAA5B;;AAEA,IAAI,MAAM,SAAV;AACA,IAAI,WAAW,QAAQ,aAAR,CAAf;;AAEA,IAAI,gBAAgB,QAAQ,wBAAR,EAAkC,QAAlC,EAA4C;AAC9D,cAAY,cAAc,MAAd,CAAqB,UAD6B;AAE9D,SAAO;AACL,YAAQ,IADH;AAEL,YAAQ;AAFH;AAFuD,CAA5C,CAApB;;AAQA,IAAI,gBAAgB,QAAQ,wBAAR,EAAkC,QAAlC,CAApB;AACA;AACA,SAAS,MAAT,CAAgB,aAAhB,EAA+B,UAAU,WAAV,EAAuB;AACpD,cAAY,MAAZ,CAAmB,gCAAnB,EAAqD,UAAU,IAAV,EAAgB,EAAhB,EAAoB;AACvE,kBAAc,OAAd,CAAsB,EAAE,QAAQ,QAAV,EAAtB;AACA;AACD,GAHD;AAID,CALD;;AAOA;AACA,oBAAY,UAAZ,EAAwB,OAAxB,CAAgC,UAAU,OAAV,EAAmB;AACjD,MAAI,UAAU,WAAW,OAAX,CAAd;AACA,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,cAAU,EAAE,QAAQ,OAAV,EAAV;AACD;AACD,MAAI,GAAJ,CAAQ,gBAAgB,OAAhB,EAAyB,OAAzB,CAAR;AACD,CAND;;AAQA;AACA,IAAI,GAAJ,CAAQ,QAAQ,8BAAR,GAAR;;AAEA;AACA,IAAI,GAAJ,CAAQ,aAAR;;AAEA;AACA;AACA,IAAI,GAAJ,CAAQ,aAAR;;AAEA;AACA,IAAI,aAAa,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAO,GAAP,CAAW,gBAA3B,EAA6C,OAAO,GAAP,CAAW,kBAAxD,CAAjB;AACA,IAAI,GAAJ,CAAQ,UAAR,EAAoB,QAAQ,MAAR,CAAe,UAAf,CAApB;;AAEA,OAAO,OAAP,GAAiB,IAAI,MAAJ,CAAW,IAAX,EAAiB,UAAU,GAAV,EAAe;AAC/C,MAAI,GAAJ,EAAS;AACP,YAAQ,GAAR,CAAY,GAAZ;AACA;AACD;AACD,UAAQ,GAAR,CAAY,mCAAmC,IAAnC,GAA0C,IAAtD;AACD,CANgB,CAAjB","file":"dev-server-compiled.js","sourcesContent":["var path = require('path')\r\nvar express = require('express')\r\nvar webpack = require('webpack')\r\nvar config = require('../config')\r\nvar proxyMiddleware = require('http-proxy-middleware')\r\nvar webpackConfig = require('./webpack.prod.conf')\r\n\r\n// default port where dev server listens for incoming traffic\r\nvar port = process.env.PORT || config.dev.port\r\n// Define HTTP proxies to your custom API backend\r\n// https://github.com/chimurai/http-proxy-middleware\r\nvar proxyTable = config.dev.proxyTable\r\n\r\nvar app = express()\r\nvar compiler = webpack(webpackConfig)\r\n\r\nvar devMiddleware = require('webpack-dev-middleware')(compiler, {\r\n  publicPath: webpackConfig.output.publicPath,\r\n  stats: {\r\n    colors: true,\r\n    chunks: false\r\n  }\r\n})\r\n\r\nvar hotMiddleware = require('webpack-hot-middleware')(compiler)\r\n// force page reload when html-webpack-plugin template changes\r\ncompiler.plugin('compilation', function (compilation) {\r\n  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {\r\n    hotMiddleware.publish({ action: 'reload' })\r\n    cb()\r\n  })\r\n})\r\n\r\n// proxy api requests\r\nObject.keys(proxyTable).forEach(function (context) {\r\n  var options = proxyTable[context]\r\n  if (typeof options === 'string') {\r\n    options = { target: options }\r\n  }\r\n  app.use(proxyMiddleware(context, options))\r\n})\r\n\r\n// handle fallback for HTML5 history API\r\napp.use(require('connect-history-api-fallback')())\r\n\r\n// serve webpack bundle output\r\napp.use(devMiddleware)\r\n\r\n// enable hot-reload and state-preserving\r\n// compilation error display\r\napp.use(hotMiddleware)\r\n\r\n// serve pure static assets\r\nvar staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)\r\napp.use(staticPath, express.static('./static'))\r\n\r\nmodule.exports = app.listen(port, function (err) {\r\n  if (err) {\r\n    console.log(err)\r\n    return\r\n  }\r\n  console.log('Listening at http://localhost:' + port + '\\n')\r\n})\r\n"]}